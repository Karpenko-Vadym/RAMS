<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RAMS.Web</name>
    </assembly>
    <members>
        <member name="T:RAMS.Web.App_Start.BundleConfig">
            <summary>
            BundleConfig class allows to register multiple css and js files under one bundle
            </summary>
        </member>
        <member name="M:RAMS.Web.App_Start.BundleConfig.RegisterBundles(System.Web.Optimization.BundleCollection)">
            <summary>
            RegisterBundles method is called when application starts in order to register bundles
            </summary>
            <param name="bundles">Collection of bundles</param>
        </member>
        <member name="T:RAMS.Web.ApplicationUserManager">
            <summary>
            Configure the application user manager used in this application. UserManager is defined in ASP.NET Identity and is used by the application
            </summary>
        </member>
        <member name="T:RAMS.Web.ApplicationSignInManager">
            <summary>
            Configure the application sign-in manager which is used in this application
            </summary>
        </member>
        <member name="T:RAMS.Web.App_Start.InitializationConfig">
            <summary>
            InitializationConfig class allows to run (Configure) all custom configurations
            </summary>
        </member>
        <member name="M:RAMS.Web.App_Start.InitializationConfig.Initialize">
            <summary>
            Initialize method runs all the custom configurations once application starts
            </summary>
        </member>
        <member name="T:RAMS.Web.RouteConfig">
            <summary>
            RouteConfig class allow to configure URL routing for the application
            </summary>
        </member>
        <member name="M:RAMS.Web.RouteConfig.RegisterRoutes(System.Web.Routing.RouteCollection)">
            <summary>
            RegisterRoutes method register default/custom URL routes
            </summary>
            <param name="routes">Route collection</param>
        </member>
        <member name="T:RAMS.Web.Startup">
            <summary>
            Startup class allows to configure OWIN application pipeline
            </summary>
        </member>
        <member name="M:RAMS.Web.Startup.Configuration(Owin.IAppBuilder)">
            <summary>
            Configuration method is executed when WebAPI is invoked
            </summary>
            <param name="app">IAppBuilder is used to add components into the Owin application pipeline</param>
        </member>
        <member name="M:WebApiConfig.Register(System.Web.Http.HttpConfiguration)">
            <summary>
            Register method allows to register "api/ControllerName/Parameters" path for WebAPI
            </summary>
            <param name="configuration">Http configuration that allows to register path for WebAPI</param>    
        </member>
        <member name="T:RAMS.Web.Areas.Agency.Controllers.AgentController">
            <summary>
            AgentController implements agent related methods
            </summary>
        </member>
        <member name="T:RAMS.Web.Controllers.BaseController">
            <summary>
            BaseController controller implements common methods for accessing WebAPI via HttpClient
            </summary>
        </member>
        <member name="M:RAMS.Web.Controllers.BaseController.#ctor">
            <summary>
            BaseController constructor initializes and configures HttpClient allowing controller that inherit from BaseController to access WebAPI using already configured HttpClient 
            </summary>
        </member>
        <member name="M:RAMS.Web.Controllers.BaseController.GetHttpClient">
            <summary>
            GetHttpClient method allows to access HttpClient (HttpClient getter)
            </summary>
            <returns>Already configured instance of an HttpClient</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.AgentController.Index">
            <summary>
            Default action method that returns main view of Agent controller
            User will be redirected to appropriate location depending on his/her UserType if user does not belong to this area
            </summary>
            <returns>Main view of Agent controller</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.AgentController.AgentList">
            <summary>
            AgentList action method gets the list of all the agents and passes it to _AgentList partial view
            </summary>
            <returns>_AgentList partial view with the list of all the agents</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.AgentController.AgentDetails(System.Int32)">
            <summary>
            AgentDetails action method gets requested agent's details and passes it to _AgentDetails partial view
            </summary>
            <param name="agentId">Id of the agent that is being fetched</param>
            <returns>_AgentDetails partial view with agent details</returns>
        </member>
        <member name="T:RAMS.Web.Areas.Agency.Controllers.ClientController">
            <summary>
            ClientController implements client related methods
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.ClientController.Index">
            <summary>
            Default action method that returns main view of Client controller
            User will be redirected to appropriate location depending on his/her UserType if user does not belong to this area
            </summary>
            <returns>Main view of Client controller</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.ClientController.ClientList">
            <summary>
            ClientList action method gets the list of all the clients and passes it to _ClientList partial view
            </summary>
            <returns>_ClientList partial view with the list of all the clients</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.ClientController.ClientDetails(System.Int32)">
            <summary>
            ClientDetails action method gets requested client's details and passes it to _ClientDetails partial view
            </summary>
            <param name="clientId">Id of the client that is being fetched</param>
            <returns>_ClientDetails partial view with client details</returns>
        </member>
        <member name="T:RAMS.Web.Areas.Agency.Controllers.HomeController">
            <summary>
            HomeController controller will be (By default) accessed as soon as user navigates (Or gets redirected) to Agency area by it's root URL
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.HomeController.Index">
            <summary>
            Index action method will be called as soon as user navigates (Or gets redirected) to Agency area by it's root URL
            User will be redirected to appropriate location depending on his/her UserType
            </summary>
            <returns>Redirects to Index method of User controller</returns>
        </member>
        <member name="T:RAMS.Web.Areas.Agency.Controllers.PositionController">
            <summary>
            PositionController implements position related methods
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.PositionController.Index">
            <summary>
            Default action method that returns main view of Position controller
            User will be redirected to appropriate location depending on his/her UserType if user does not belong to this area
            </summary>
            <returns>Main view of Position controller</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.PositionController.PositionList">
            <summary>
            PositionList action method gets the list of all the positions and passes it to _PositionList partial view
            </summary>
            <returns>_PositionList partial view with the list of all the positions</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.PositionController.EditPosition(System.Int32)">
            <summary>
            EditPosition action method gets requested position's details and passes it to _EditPosition partial view
            </summary>
            <param name="positionId">Id of the position that is being fetched</param>
            <returns>_EditPosition partial view with position details</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.PositionController.EditPosition(RAMS.ViewModels.PositionEditViewModel)">
            <summary>
            EditPosition action method attempts to update position details
            </summary>
            <param name="model">Position information required to update the position</param>
            <returns>_PositionConfirmation partial view if position has been updated successfully, _Error partial view otherwise</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.PositionController.EditCandidate(System.Int32,System.String)">
            <summary>
            EditCandidate action method retrieves candidate's data and displays it in _EditCandidate partial view
            </summary>
            <param name="candidateId">Id of the candidate whos information will be displayed</param>
            <param name="positionStatus">Status of the position (Needed for access control)</param>
            <returns>_EditCandidate partial view with candidates information</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.PositionController.EditCandidate(RAMS.ViewModels.CandidateEditViewModel)">
            <summary>
            EditCandidate action method attempts to update candidate's feedback
            </summary>
            <param name="model">Candidate information required to update candidate's feedback</param>
            <returns>_CandidateEditConfirmation partial view if candidate's feedback has been updated successfully, _Error partial view otherwise</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.PositionController.ApprovePosition(System.Int32,System.String)">
            <summary>
            ApprovePosition action method displays confirmation for position approval in _ApprovePosition partial view
            </summary>
            <param name="positionId">Id of the position to be approved</param>
            <param name="positionTitle">Title of the position to be approved</param>
            <returns>_ApprovePosition partial view with prompt of confirmation to approve the position</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.PositionController.ApprovePosition(RAMS.ViewModels.PositionApprovalSuspendUnsuspentionViewModel)">
            <summary>
            ApprovePosition action method attempts to update position status to approved
            </summary>
            <param name="model">Position information required to update position status</param>
            <returns>_SuccessConfirmation partial view if position status has been updated successfully, _FailureConfirmation partial view otherwise</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.PositionController.UnsuspendPosition(System.Int32,System.String)">
            <summary>
            UnsuspendPosition action method displays confirmation for position unsuspention in _UnsuspendPosition partial view
            </summary>
            <param name="positionId">Id of the position to be unsuspended</param>
            <param name="positionTitle">Title of the position to be unsuspended</param>
            <returns>_UnsuspendPosition partial view with prompt of confirmation to unsuspend the position</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.PositionController.UnsuspendPosition(RAMS.ViewModels.PositionApprovalSuspendUnsuspentionViewModel)">
            <summary>
            UnsuspendPosition action method attempts to update position status to approved (From suspended)
            </summary>
            <param name="model">Position information required to update position status</param>
            <returns>_SuccessConfirmation partial view if position status has been updated successfully, _FailureConfirmation partial view otherwise</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.PositionController.ClosePosition(System.Int32,System.String)">
            <summary>
            ClosePosition action method displays confirmation for position closure in _ClosePosition partial view
            </summary>
            <param name="positionId">Id of the position to be closed</param>
            <param name="positionTitle">Title of the position to be closed</param>
            <returns>_ClosePosition partial view with prompt of confirmation to close the position</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.PositionController.ClosePosition(RAMS.ViewModels.PositionClosureViewModel)">
            <summary>
            ClosePosition action method attempts to update position status to closed
            </summary>
            <param name="model">Position information required to update position status</param>
            <returns>_SuccessConfirmation partial view if position status has been updated successfully, _FailureConfirmation partial view otherwise</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.PositionController.AssignPosition(System.Int32,System.Int32,System.String)">
            <summary>
            AssignPosition action method displays the list of agents that can be assigned to the position
            </summary>
            <param name="positionId">Id of the position to which an agent to be assigned</param>
            <param name="agentId">Id of the agent that is currently assigned to this position (If any)</param>
            <param name="positionTitle">Title of the position</param>
            <returns>_AssignPosition partial view with the list of agents that can be assigned to the position</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.PositionController.AssignPosition(RAMS.ViewModels.PositionAssignViewModel)">
            <summary>
            AssignPosition action method attempts to assign an agent to the position
            </summary>
            <param name="model">Position information required to assign an agent to the position</param>
            <returns>_SuccessConfirmation partial view if an agent has been successfully assigned to the position, _FailureConfirmation partial view otherwise</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.PositionController.ScheduleInterview(System.Int32,System.String,System.Boolean)">
            <summary>
            ScheduleInterview action method retrieves all the interviews for current user and displays the schedule for the week in _ScheduleInterview partial view
            </summary>
            <param name="candidateId">Id of the candidate for whom the interview is being scheduled</param>
            <param name="displayDate">Schedule is displayed for the week of this date</param>
            <param name="selected">Indicates whether Candidate has previously scheduled interview</param>
            <returns>_ScheduleInterview partial view with the schedule for the week</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.PositionController.ScheduleInterview(RAMS.ViewModels.InterviewScheduleViewModel)">
            <summary>
            ScheduleInterview action method attempts to persist the interview
            </summary>
            <param name="model">Data required to persist the interview</param>
            <returns>_SuccessConfirmation partial view if an interview has been successfully persisted, _FailureConfirmation partial view otherwise</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.PositionController.GetResume(System.String)">
            <summary>
            GetResume method attempts to fetch candidates resume and return it as s file
            </summary>
            <param name="resumeId">Id of the candidate whos resume is being fetched</param>
            <returns>Resume as a file</returns>
        </member>
        <member name="T:RAMS.Web.Areas.Agency.Controllers.ProfileController">
            <summary>
            ProfileController implements employee profile related methods
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.ProfileController.Index(System.String)">
            <summary>
            Default action method that returns main view of Profile controller
            User will be redirected to appropriate location depending on his/her UserType if user does not belong to this area
            </summary>
            <param name="message">Message that will be displayed in the view. This message will inform the user about success or failure of particular operation</param>
            <returns>Main view of Profile controller</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.ProfileController.ProfileDetails">
            <summary>
            ProfileDetails method gets employee's details and passes it to _ProfileDetails partial view
            </summary>
            <returns>_ProfileDetails partial view with current user's employee details</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.ProfileController.UploadProfilePicture">
            <summary>
            UploadProfilePicture method gets current user's user name and passes it to _UploadProfilePicture partial view 
            </summary>
            <returns>_UploadProfilePicture partial view with current user's user name passed in to it in a AgentProfilePictureViewModel view model</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.ProfileController.UploadProfilePicture(RAMS.ViewModels.AgentProfilePictureViewModel)">
            <summary>
            UploadProfilePicture method determines what is the content type of the uploaded file and if file content type is not supported passes an error message to Index action method. Otherwise, saves the file.
            </summary>
            <param name="model">View model with information required to save the file</param>
            <returns>Redirects to Index view with success message, or failure message</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.ProfileController.DeleteProfilePicture">
            <summary>
            DeleteProfilePicture method deletes profile picture for current user
            </summary>
            <returns>Redirects to Index view with success message, or failure message</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.ProfileController.GetNotificationList">
            <summary>
            GetNotificationList method gets the list of notifications for current user and passes it to _NotificationList partial view
            </summary>
            <returns>_NotificationList partial view with the list of notifications for current user (If any)</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.ProfileController.ChangeNotificationStatus(System.Int32,System.String,System.String)">
            <summary>
            ChangeNotificationStatus method gets selected notification details and passes it to _ChangeNotificationStatus partial view
            </summary>
            <param name="notificationId">Id of selected notification</param>
            <param name="notificationTitle">Title of selected notification</param>
            <param name="notificationStatus">Status of selected notification (Already set to oposite of current for API)</param>
            <returns>_ChangeNotificationStatus partial view with required information for updating the status</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.ProfileController.ChangeNotificationStatus(RAMS.ViewModels.NotificationChangeStatusViewModel)">
            <summary>
            ChangeNotificationStatus method changes the status of the notification and returns _Confirmation partial view with success message or failure message depending on the outcome of this method
            </summary>
            <param name="model">NotificationChangeStatusViewModel view model with information required for updating notification status</param>
            <returns>_Confirmation partial view with success message or failure message depending on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.ProfileController.PersonalSchedule(System.String)">
            <summary>
            PersonalSchedule action method retrieves all the interviews for current user and displays the schedule for the week in _PersonalSchedule partial view
            </summary>
            <param name="displayDate">Schedule is displayed for the week of this date</param>
            <returns>_PersonalSchedule partial view with the schedule for the week</returns>
        </member>
        <member name="T:RAMS.Web.Areas.Agency.Controllers.ReportController">
            <summary>
            ReportController implements report related methods
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.ReportController.Index">
            <summary>
            Default action method that returns main view of Report controller
            User will be redirected to appropriate location depending on his/her UserType if user does not belong to this area
            </summary>
            <returns>Main view of Report controller</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.ReportController.PositionList">
            <summary>
            PositionList action method gets the list of all the positions and passes it to _PositionList partial view
            </summary>
            <returns>_PositionList partial view with the list of all the positions</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.ReportController.PositionStatusReport(System.Int32)">
            <summary>
            PositionStatusReport action method gets requested position's details and passes it to _PositionStatusReport partial view
            </summary>
            <param name="positionId">Id of the position that is being fetched</param>
            <returns>_PositionStatusReport partial view with position details</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.ReportController.PositionFinalReport(System.Int32)">
            <summary>
            PositionFinalReport action method gets requested position's details and passes it to _PositionFinalReport partial view
            </summary>
            <param name="positionId">Id of the position that is being fetched</param>
            <returns>_PositionFinalReport partial view with position details</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Agency.Controllers.ReportController.CandidateReport(System.Int32)">
            <summary>
            CandidateReport action method gets requested candidate's details and passes it to _CandidateReport partial view
            </summary>
            <param name="candidateId">Id of the candidate that is being fetched</param>
            <returns>_CandidateReport partial view with candidate details</returns>
        </member>
        <member name="T:RAMS.Web.Areas.Customer.Controllers.HomeController">
            <summary>
            HomeController controller will be (By default) accessed as soon as user navigates (Or gets redirected) to Customer area by it's root URL
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.HomeController.Index">
            <summary>
            Index action method will be called as soon as user navigates (Or gets redirected) to Customer area by it's root URL
            User will be redirected to appropriate location depending on his/her UserType
            </summary>
            <returns>Redirects to Index method of User controller</returns>
        </member>
        <member name="T:RAMS.Web.Areas.Customer.Controllers.PositionController">
            <summary>
            PositionController implements position related methods
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.PositionController.Index">
            <summary>
            Default action method that returns main view of Profile controller
            User will be redirected to appropriate location depending on his/her UserType if user does not belong to this area
            </summary>
            <returns>Main view of Position controller</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.PositionController.PositionList">
            <summary>
            PositionList action method gets the list of all the positions for current client and passes it to _PositionList partial view
            </summary>
            <returns>_PositionList partial view with the list of all the positions</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.PositionController.NewPosition">
            <summary>
            NewPosition action method populates select lists and client id for the view model and passes it to _NewPosition partial view
            </summary>
            <returns>_NewPosition partial view if select lists and client id were populated successfully, _Error partial view with detailed error message otherwise</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.PositionController.NewPosition(RAMS.ViewModels.PositionAddViewModel)">
            <summary>
            NewPosition action method attempts to persist new position to the data context 
            </summary>
            <param name="model">Position information required persist position to the data context</param>
            <returns>_PositionConfirmation partial view if position has been persisted successfully, _Error partial view otherwise</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.PositionController.SuspendPosition(System.Int32,System.String)">
            <summary>
            SuspendPosition action method displays confirmation for position suspention in _SuspendPosition partial view
            </summary>
            <param name="positionId">Id of the position to be unsuspended</param>
            <param name="positionTitle">Title of the position to be unsuspended</param>
            <returns>_SuspendPosition partial view with prompt of confirmation to unsuspend the position</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.PositionController.SuspendPosition(RAMS.ViewModels.PositionApprovalSuspendUnsuspentionViewModel)">
            <summary>
            SuspendPosition action method attempts to update position status to suspended
            </summary>
            <param name="model">Position information required to update position status</param>
            <returns>_SuccessConfirmation partial view if position status has been updated successfully, _FailureConfirmation partial view otherwise</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.PositionController.PositionDetails(System.Int32)">
            <summary>
            PositionDetails action method retrieves the details of the position and passes it to _PositionDetails partial view
            </summary>
            <param name="positionId">Id of the position which details are being fetched</param>
            <returns>_PositionDetails partial view with the details for the position</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.PositionController.PositionClosure(System.Int32,System.Int32,System.String,System.String,System.String)">
            <summary>
            PositionClosure action method sets PositionClosureConfirmationViewModel and passes it to _PositionClosureConfirmation partial view
            </summary>
            <param name="agentId">Setter for AgentId</param>
            <param name="positionId">Setter for PositionId</param>
            <param name="positionTitle">Setter for PositionTitle</param>
            <param name="clientUserName">Setter for ClientUserName</param>
            <param name="clientFullName">Setter for ClientFullName</param>
            <returns>_PositionClosureConfirmation partial view</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.PositionController.PositionClosure(RAMS.ViewModels.PositionClosureConfirmationViewModel)">
            <summary>
            PositionClosure action method validates the model and attempts to create new notification for the agent who is assigned to current position
            </summary>
            <param name="model">Information required to create notification</param>
            <returns>_SuccessConfirmation partial view if notification was created successfully, _FailureConfirmation otherwise</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.PositionController.GetResume(System.String)">
            <summary>
            GetResume method attempts to fetch candidates resume and return it as s file
            </summary>
            <param name="resumeId">Id of the candidate whos resume is being fetched</param>
            <returns>Resume as a file</returns>
        </member>
        <member name="T:RAMS.Web.Areas.Customer.Controllers.ProfileController">
            <summary>
            ProfileController implements employee profile related methods
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.ProfileController.Index(System.String)">
            <summary>
            Default action method that returns main view of Profile controller
            User will be redirected to appropriate location depending on his/her UserType if user does not belong to this area
            </summary>
            <param name="message">Message that will be displayed in the view. This message will inform the user about success or failure of particular operation</param>
            <returns>Main view of Profile controller</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.ProfileController.ProfileDetails">
            <summary>
            ProfileDetails method gets employee's details and passes it to _ProfileDetails partial view
            </summary>
            <returns>_ProfileDetails partial view with current user's employee details</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.ProfileController.UploadProfilePicture">
            <summary>
            UploadProfilePicture method gets current user's user name and passes it to _UploadProfilePicture partial view 
            </summary>
            <returns>_UploadProfilePicture partial view with current user's user name passed in to it in a ClientProfilePictureViewModel view model</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.ProfileController.UploadProfilePicture(RAMS.ViewModels.ClientProfilePictureViewModel)">
            <summary>
            UploadProfilePicture method determines what is the content type of the uploaded file and if file content type is not supported passes an error message to Index action method. Otherwise, saves the file.
            </summary>
            <param name="model">View model with information required to save the file</param>
            <returns>Redirects to Index view with success message, or failure message</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.ProfileController.DeleteProfilePicture">
            <summary>
            DeleteProfilePicture method deletes profile picture for current user
            </summary>
            <returns>Redirects to Index view with success message, or failure message</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.ProfileController.GetNotificationList">
            <summary>
            GetNotificationList method gets the list of notifications for current user and passes it to _NotificationList partial view
            </summary>
            <returns>_NotificationList partial view with the list of notifications for current user (If any)</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.ProfileController.ChangeNotificationStatus(System.Int32,System.String,System.String)">
            <summary>
            ChangeNotificationStatus method gets selected notification details and passes it to _ChangeNotificationStatus partial view
            </summary>
            <param name="notificationId">Id of selected notification</param>
            <param name="notificationTitle">Title of selected notification</param>
            <param name="notificationStatus">Status of selected notification (Already set to oposite of current for API)</param>
            <returns>_ChangeNotificationStatus partial view with required information for updating the status</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.ProfileController.ChangeNotificationStatus(RAMS.ViewModels.NotificationChangeStatusViewModel)">
            <summary>
            ChangeNotificationStatus method changes the status of the notification and returns _Confirmation partial view with success message or failure message depending on the outcome of this method
            </summary>
            <param name="model">NotificationChangeStatusViewModel view model with information required for updating notification status</param>
            <returns>_Confirmation partial view with success message or failure message depending on the outcome of this method</returns>
        </member>
        <member name="T:RAMS.Web.Areas.Customer.Controllers.ReportController">
            <summary>
            ReportController implements report related methods
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.ReportController.Index">
            <summary>
            Default action method that returns main view of Report controller
            User will be redirected to appropriate location depending on his/her UserType if user does not belong to this area
            </summary>
            <returns>Main view of Report controller</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.ReportController.PositionList">
            <summary>
            PositionList action method gets the list of all the positions and passes it to _PositionList partial view
            </summary>
            <returns>_PositionList partial view with the list of all the positions</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.ReportController.PositionStatusReport(System.Int32)">
            <summary>
            PositionStatusReport action method gets requested position's details and passes it to _PositionStatusReport partial view
            </summary>
            <param name="positionId">Id of the position that is being fetched</param>
            <returns>_PositionStatusReport partial view with position details</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.ReportController.PositionFinalReport(System.Int32)">
            <summary>
            PositionFinalReport action method gets requested position's details and passes it to _PositionFinalReport partial view
            </summary>
            <param name="positionId">Id of the position that is being fetched</param>
            <returns>_PositionFinalReport partial view with position details</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Customer.Controllers.ReportController.CandidateReport(System.Int32)">
            <summary>
            CandidateReport action method gets requested candidate's details and passes it to _CandidateReport partial view
            </summary>
            <param name="candidateId">Id of the candidate that is being fetched</param>
            <returns>_CandidateReport partial view with candidate details</returns>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.ApiDescriptionExtensions.GetFriendlyId(System.Web.Http.Description.ApiDescription)">
            <summary>
            Generates an URI-friendly ID for the <see cref="T:System.Web.Http.Description.ApiDescription"/>. E.g. "Get-Values-id_name" instead of "GetValues/{id}?name={name}"
            </summary>
            <param name="description">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The ID as a string.</returns>
        </member>
        <member name="T:RAMS.Web.Areas.HelpPage.HelpPageConfig">
            <summary>
            Use this class to customize the Help Page.
            For example you can set a custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> to supply the documentation
            or you can provide the samples for the requests/responses.
            </summary>
        </member>
        <member name="T:RAMS.Web.Areas.HelpPage.Controllers.HelpController">
            <summary>
            The controller that will handle requests for the help page.
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageConfigurationExtensions.SetDocumentationProvider(System.Web.Http.HttpConfiguration,System.Web.Http.Description.IDocumentationProvider)">
            <summary>
            Sets the documentation provider for help page.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="documentationProvider">The documentation provider.</param>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleObjects(System.Web.Http.HttpConfiguration,System.Collections.Generic.IDictionary{System.Type,System.Object})">
            <summary>
            Sets the objects that will be used by the formatters to produce sample requests/responses.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleObjects">The sample objects.</param>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type and action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleRequest(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample request directly for the specified media type and action with parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample request.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String)">
            <summary>
            Sets the sample request directly for the specified media type of the action.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleResponse(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.String,System.String,System.String[])">
            <summary>
            Sets the sample response directly for the specified media type of the action with specific parameters.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample response.</param>
            <param name="mediaType">The media type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForMediaType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Sets the sample directly for all actions with the specified media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageConfigurationExtensions.SetSampleForType(System.Web.Http.HttpConfiguration,System.Object,System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Sets the sample directly for all actions with the specified type and media type.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sample">The sample.</param>
            <param name="mediaType">The media type.</param>
            <param name="type">The parameter type or return type of an action.</param>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualRequestType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate request samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String)">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageConfigurationExtensions.SetActualResponseType(System.Web.Http.HttpConfiguration,System.Type,System.String,System.String,System.String[])">
            <summary>
            Specifies the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> returned as part of the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            The help page will use this information to produce more accurate response samples.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="type">The type.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <returns>The help page sample generator.</returns>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageConfigurationExtensions.SetHelpPageSampleGenerator(System.Web.Http.HttpConfiguration,RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator)">
            <summary>
            Sets the help page sample generator.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="sampleGenerator">The help page sample generator.</param>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageConfigurationExtensions.GetModelDescriptionGenerator(System.Web.Http.HttpConfiguration)">
            <summary>
            Gets the model description generator.
            </summary>
            <param name="config">The configuration.</param>
            <returns>The <see cref="T:RAMS.Web.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator"/></returns>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageConfigurationExtensions.GetHelpPageApiModel(System.Web.Http.HttpConfiguration,System.String)">
            <summary>
            Gets the model that represents an API displayed on the help page. The model is initialized on the first call and cached for subsequent calls.
            </summary>
            <param name="config">The <see cref="T:System.Web.Http.HttpConfiguration"/>.</param>
            <param name="apiDescriptionId">The <see cref="T:System.Web.Http.Description.ApiDescription"/> ID.</param>
            <returns>
            An <see cref="T:RAMS.Web.Areas.HelpPage.Models.HelpPageApiModel"/>
            </returns>
        </member>
        <member name="T:RAMS.Web.Areas.HelpPage.ModelDescriptions.ModelDescription">
            <summary>
            Describes a type model.
            </summary>
        </member>
        <member name="T:RAMS.Web.Areas.HelpPage.ModelDescriptions.ModelDescriptionGenerator">
            <summary>
            Generates model descriptions for given types.
            </summary>
        </member>
        <member name="T:RAMS.Web.Areas.HelpPage.ModelDescriptions.ModelNameAttribute">
            <summary>
            Use this attribute to change the name of the <see cref="T:RAMS.Web.Areas.HelpPage.ModelDescriptions.ModelDescription"/> generated for a type.
            </summary>
        </member>
        <member name="T:RAMS.Web.Areas.HelpPage.Models.HelpPageApiModel">
            <summary>
            The model that represents an API displayed on the help page.
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.Models.HelpPageApiModel.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RAMS.Web.Areas.HelpPage.Models.HelpPageApiModel"/> class.
            </summary>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription">
            <summary>
            Gets or sets the <see cref="P:RAMS.Web.Areas.HelpPage.Models.HelpPageApiModel.ApiDescription"/> that describes the API.
            </summary>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.Models.HelpPageApiModel.UriParameters">
            <summary>
            Gets or sets the <see cref="T:RAMS.Web.Areas.HelpPage.ModelDescriptions.ParameterDescription"/> collection that describes the URI parameters for the API.
            </summary>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.Models.HelpPageApiModel.RequestDocumentation">
            <summary>
            Gets or sets the documentation for the request.
            </summary>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.Models.HelpPageApiModel.RequestModelDescription">
            <summary>
            Gets or sets the <see cref="T:RAMS.Web.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the request body.
            </summary>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.Models.HelpPageApiModel.RequestBodyParameters">
            <summary>
            Gets the request body parameter descriptions.
            </summary>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.Models.HelpPageApiModel.ResourceDescription">
            <summary>
            Gets or sets the <see cref="T:RAMS.Web.Areas.HelpPage.ModelDescriptions.ModelDescription"/> that describes the resource.
            </summary>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.Models.HelpPageApiModel.ResourceProperties">
            <summary>
            Gets the resource property descriptions.
            </summary>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.Models.HelpPageApiModel.SampleRequests">
            <summary>
            Gets the sample requests associated with the API.
            </summary>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.Models.HelpPageApiModel.SampleResponses">
            <summary>
            Gets the sample responses associated with the API.
            </summary>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.Models.HelpPageApiModel.ErrorMessages">
            <summary>
            Gets the error messages associated with this model.
            </summary>
        </member>
        <member name="T:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator">
            <summary>
            This class will generate the samples for the help page.
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator"/> class.
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator.GetSampleRequests(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the request body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator.GetSampleResponses(System.Web.Http.Description.ApiDescription)">
            <summary>
            Gets the response body samples for a given <see cref="T:System.Web.Http.Description.ApiDescription"/>.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator.GetSample(System.Web.Http.Description.ApiDescription,RAMS.Web.Areas.HelpPage.SampleDirection)">
            <summary>
            Gets the request or response body samples.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The samples keyed by media type.</returns>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator.GetActionSample(System.String,System.String,System.Collections.Generic.IEnumerable{System.String},System.Type,System.Net.Http.Formatting.MediaTypeFormatter,System.Net.Http.Headers.MediaTypeHeaderValue,RAMS.Web.Areas.HelpPage.SampleDirection)">
            <summary>
            Search for samples that are provided directly through <see cref="P:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples"/>.
            </summary>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="type">The CLR type.</param>
            <param name="formatter">The formatter.</param>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or for a response.</param>
            <returns>The sample that matches the parameters.</returns>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator.GetSampleObject(System.Type)">
            <summary>
            Gets the sample object that will be serialized by the formatters. 
            First, it will look at the <see cref="P:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects"/>. If no sample object is found, it will try to create
            one using <see cref="M:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator.DefaultSampleObjectFactory(RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator,System.Type)"/> (which wraps an <see cref="T:RAMS.Web.Areas.HelpPage.ObjectGenerator"/>) and other
            factories in <see cref="P:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>The sample object.</returns>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator.ResolveHttpRequestMessageType(System.Web.Http.Description.ApiDescription)">
            <summary>
            Resolves the actual type of <see cref="T:System.Net.Http.ObjectContent`1"/> passed to the <see cref="T:System.Net.Http.HttpRequestMessage"/> in an action.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <returns>The type.</returns>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator.ResolveType(System.Web.Http.Description.ApiDescription,System.String,System.String,System.Collections.Generic.IEnumerable{System.String},RAMS.Web.Areas.HelpPage.SampleDirection,System.Collections.ObjectModel.Collection{System.Net.Http.Formatting.MediaTypeFormatter}@)">
            <summary>
            Resolves the type of the action parameter or return value when <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/> is used.
            </summary>
            <param name="api">The <see cref="T:System.Web.Http.Description.ApiDescription"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
            <param name="sampleDirection">The value indicating whether the sample is for a request or a response.</param>
            <param name="formatters">The formatters.</param>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator.WriteSampleObjectUsingFormatter(System.Net.Http.Formatting.MediaTypeFormatter,System.Object,System.Type,System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Writes the sample object using formatter.
            </summary>
            <param name="formatter">The formatter.</param>
            <param name="value">The value.</param>
            <param name="type">The type.</param>
            <param name="mediaType">Type of the media.</param>
            <returns></returns>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator.ActualHttpMessageTypes">
            <summary>
            Gets CLR types that are used as the content of <see cref="T:System.Net.Http.HttpRequestMessage"/> or <see cref="T:System.Net.Http.HttpResponseMessage"/>.
            </summary>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator.ActionSamples">
            <summary>
            Gets the objects that are used directly as samples for certain actions.
            </summary>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator.SampleObjects">
            <summary>
            Gets the objects that are serialized as samples by the supported formatters.
            </summary>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.HelpPageSampleGenerator.SampleObjectFactories">
            <summary>
            Gets factories for the objects that the supported formatters will serialize as samples. Processed in order,
            stopping when the factory successfully returns a non-<see langref="null"/> object.
            </summary>
            <remarks>
            Collection includes just <see cref="M:RAMS.Web.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)"/> initially. Use
            <code>SampleObjectFactories.Insert(0, func)</code> to provide an override and
            <code>SampleObjectFactories.Add(func)</code> to provide a fallback.</remarks>
        </member>
        <member name="T:RAMS.Web.Areas.HelpPage.HelpPageSampleKey">
            <summary>
            This is used to identify the place where the sample should be applied.
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue)">
            <summary>
            Creates a new <see cref="T:RAMS.Web.Areas.HelpPage.HelpPageSampleKey"/> based on media type.
            </summary>
            <param name="mediaType">The media type.</param>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,System.Type)">
            <summary>
            Creates a new <see cref="T:RAMS.Web.Areas.HelpPage.HelpPageSampleKey"/> based on media type and CLR type.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="type">The CLR type.</param>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageSampleKey.#ctor(RAMS.Web.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:RAMS.Web.Areas.HelpPage.HelpPageSampleKey"/> based on <see cref="P:RAMS.Web.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="sampleDirection">The <see cref="P:RAMS.Web.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.HelpPageSampleKey.#ctor(System.Net.Http.Headers.MediaTypeHeaderValue,RAMS.Web.Areas.HelpPage.SampleDirection,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Creates a new <see cref="T:RAMS.Web.Areas.HelpPage.HelpPageSampleKey"/> based on media type, <see cref="P:RAMS.Web.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>, controller name, action name and parameter names.
            </summary>
            <param name="mediaType">The media type.</param>
            <param name="sampleDirection">The <see cref="P:RAMS.Web.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.</param>
            <param name="controllerName">Name of the controller.</param>
            <param name="actionName">Name of the action.</param>
            <param name="parameterNames">The parameter names.</param>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.HelpPageSampleKey.ControllerName">
            <summary>
            Gets the name of the controller.
            </summary>
            <value>
            The name of the controller.
            </value>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.HelpPageSampleKey.ActionName">
            <summary>
            Gets the name of the action.
            </summary>
            <value>
            The name of the action.
            </value>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.HelpPageSampleKey.MediaType">
            <summary>
            Gets the media type.
            </summary>
            <value>
            The media type.
            </value>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.HelpPageSampleKey.ParameterNames">
            <summary>
            Gets the parameter names.
            </summary>
        </member>
        <member name="P:RAMS.Web.Areas.HelpPage.HelpPageSampleKey.SampleDirection">
            <summary>
            Gets the <see cref="P:RAMS.Web.Areas.HelpPage.HelpPageSampleKey.SampleDirection"/>.
            </summary>
        </member>
        <member name="T:RAMS.Web.Areas.HelpPage.ImageSample">
            <summary>
            This represents an image sample on the help page. There's a display template named ImageSample associated with this class.
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.ImageSample.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RAMS.Web.Areas.HelpPage.ImageSample"/> class.
            </summary>
            <param name="src">The URL of an image.</param>
        </member>
        <member name="T:RAMS.Web.Areas.HelpPage.InvalidSample">
            <summary>
            This represents an invalid sample on the help page. There's a display template named InvalidSample associated with this class.
            </summary>
        </member>
        <member name="T:RAMS.Web.Areas.HelpPage.ObjectGenerator">
            <summary>
            This class will create an object of a given type and populate it with sample data.
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.ObjectGenerator.GenerateObject(System.Type)">
            <summary>
            Generates an object for a given type. The type needs to be public, have a public default constructor and settable public properties/fields. Currently it supports the following types:
            Simple types: <see cref="T:System.Int32"/>, <see cref="T:System.String"/>, <see cref="T:System.Enum"/>, <see cref="T:System.DateTime"/>, <see cref="T:System.Uri"/>, etc.
            Complex types: POCO types.
            Nullables: <see cref="T:System.Nullable`1"/>.
            Arrays: arrays of simple types or complex types.
            Key value pairs: <see cref="T:System.Collections.Generic.KeyValuePair`2"/>
            Tuples: <see cref="T:System.Tuple`1"/>, <see cref="T:System.Tuple`2"/>, etc
            Dictionaries: <see cref="T:System.Collections.Generic.IDictionary`2"/> or anything deriving from <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            Collections: <see cref="T:System.Collections.Generic.IList`1"/>, <see cref="T:System.Collections.Generic.IEnumerable`1"/>, <see cref="T:System.Collections.Generic.ICollection`1"/>, <see cref="T:System.Collections.IList"/>, <see cref="T:System.Collections.IEnumerable"/>, <see cref="T:System.Collections.ICollection"/> or anything deriving from <see cref="T:System.Collections.Generic.ICollection`1"/> or <see cref="T:System.Collections.IList"/>.
            Queryables: <see cref="T:System.Linq.IQueryable"/>, <see cref="T:System.Linq.IQueryable`1"/>.
            </summary>
            <param name="type">The type.</param>
            <returns>An object of the given type.</returns>
        </member>
        <member name="T:RAMS.Web.Areas.HelpPage.SampleDirection">
            <summary>
            Indicates whether the sample is used for request or response
            </summary>
        </member>
        <member name="T:RAMS.Web.Areas.HelpPage.TextSample">
            <summary>
            This represents a preformatted text sample on the help page. There's a display template named TextSample associated with this class.
            </summary>
        </member>
        <member name="T:RAMS.Web.Areas.HelpPage.XmlDocumentationProvider">
            <summary>
            A custom <see cref="T:System.Web.Http.Description.IDocumentationProvider"/> that reads the API documentation from an XML documentation file.
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.HelpPage.XmlDocumentationProvider.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:RAMS.Web.Areas.HelpPage.XmlDocumentationProvider"/> class.
            </summary>
            <param name="documentPath">The physical path to XML document.</param>
        </member>
        <member name="T:RAMS.Web.Areas.Print.Controllers.HomeController">
            <summary>
            HomeController implements print related methods
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.Print.Controllers.HomeController.Index">
            <summary>
            Index action method will be called as soon as user navigates (Or gets redirected) to Print area by it's root URL
            User will be redirected to appropriate location depending on his/her UserType
            </summary>
            <returns>Redirected to appropriate location depending on his/her UserType</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Print.Controllers.HomeController.PositionStatusReport(System.String)">
            <summary>
            PositionStatusReportPrint action method gets requested position's details and passes it to PositionStatusReportPrint view
            </summary>
            <param name="positionId">Id of the position that is being fetched</param>
            <returns>PositionStatusReportPrint view with position details</returns>
        </member>
        <member name="M:RAMS.Web.Areas.Print.Controllers.HomeController.PositionFinalReport(System.String)">
            <summary>
            PositionFinalReportPrint action method gets requested position's details and passes it to PositionFinalReportPrint view
            </summary>
            <param name="positionId">Id of the position that is being fetched</param>
            <returns>PositionFinalReportPrint view with position details</returns>
        </member>
        <member name="T:RAMS.Web.Areas.SystemAdmin.Controllers.CategoryController">
            <summary>
            CategoryController controller implements CRUD operations for categories
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.CategoryController.Index">
            <summary>
            Index action method will be called as soon as user navigates (Or gets redirected) to /RAMS/Category
            This method displays the main view where all category related CRUD operations take place 
            User will be redirected to appropriate location depending on his/her UserType if user does not belong to this area
            </summary>
            <returns>Main view where all category related CRUD operations take place</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.CategoryController.CategoryList">
            <summary>
            CategoryList method gets the list of all categories and passess it to _CategoryList partial view
            </summary>
            <returns>_CategoryList partial view with a list of categories as it's model</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.CategoryController.NewCategory">
            <summary>
            NewCategory method returns _NewCategory partial view
            </summary>
            <returns>_NewCategory partial view</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.CategoryController.NewCategory(RAMS.ViewModels.CategoryAddViewModel)">
            <summary>
            NewCategory method validates the model and attempts to persist it database if model state is valid
            </summary>
            <param name="model">Model containing properties required for creating new category</param>
            <returns>If model state is not valid, re-displays _NewCategory partial view with an input form and an error message. Otherwise returns success message or error message depending on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.CategoryController.EditCategory(System.Int32)">
            <summary>
            EditCategory method retrieves one category by it's id and displays it's information in _EditCategory partial view
            </summary>
            <param name="id">Id of the category to be retrieved</param>
            <returns>_EditCategory partial view with details of retrieved category if category information could be retrieved, otherwise an error message</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.CategoryController.EditCategory(RAMS.ViewModels.CategoryEditViewModel)">
            <summary>
            EditCategory method validates the model and attempts to persist it database if model state is valid
            </summary>
            <param name="model">Model containing properties required for editing existing category</param>
            <returns>If model state is not valid, re-displays _EditCategory partial view with an input form and an error message. Otherwise returns success message or error message depending on the outcome of this method</returns>
        </member>
        <member name="T:RAMS.Web.Areas.SystemAdmin.Controllers.DepartmentController">
            <summary>
            DepartmentController controller implements CRUD operations for departments
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.DepartmentController.Index">
            <summary>
            Index action method will be called as soon as user navigates (Or gets redirected) to /RAMS/Department
            This method displays the main view where all department related CRUD operations take place 
            User will be redirected to appropriate location depending on his/her UserType if user does not belong to this area
            </summary>
            <returns>Main view where all department related CRUD operations take place</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.DepartmentController.DepartmentList">
            <summary>
            DepartmentList method gets the list of all departments and passess it to _DepartmentList partial view
            </summary>
            <returns>_DepartmentList partial view with a list of departments as it's model</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.DepartmentController.NewDepartment">
            <summary>
            NewDepartment method returns _NewDepartment partial view
            </summary>
            <returns>_NewDepartment partial view</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.DepartmentController.NewDepartment(RAMS.ViewModels.DepartmentAddViewModel)">
            <summary>
            NewDepartment method validates the model and attempts to persist it database if model state is valid
            </summary>
            <param name="model">Model containing properties required for creating new department</param>
            <returns>If model state is not valid, re-displays _NewDepartment partial view with an input form and an error message. Otherwise returns success message or error message depending on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.DepartmentController.EditDepartment(System.Int32)">
            <summary>
            EditDepartment method retrieves one department by it's id and displays it's information in _EditDepartment partial view
            </summary>
            <param name="id">Id of the department to be retrieved</param>
            <returns>_EditDepartment partial view with details of retrieved department if department information could be retrieved, otherwise an error message</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.DepartmentController.EditDepartment(RAMS.ViewModels.DepartmentEditViewModel)">
            <summary>
            EditDepartment method validates the model and attempts to persist it database if model state is valid
            </summary>
            <param name="model">Model containing properties required for editing existing department</param>
            <returns>If model state is not valid, re-displays _EditDepartment partial view with an input form and an error message. Otherwise returns success message or error message depending on the outcome of this method</returns>
        </member>
        <member name="T:RAMS.Web.Areas.SystemAdmin.Controllers.HomeController">
            <summary>
            HomeController controller will be (By default) accessed as soon as user navigates (Or gets redirected) to SystemAdmin area by it's root URL
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.HomeController.Index">
            <summary>
            Index action method will be called as soon as user navigates (Or gets redirected) to SystemAdmin area by it's root URL
            User will be redirected to Index method of Profile controller if user's UserType is Admin, otherwise user will be redirected to appropriate location depending on his/her UserType
            </summary>
            <returns>Redirects to Index method of Profile controller if user's UserType is Admin, otherwise user will be redirected to appropriate location depending on his/her UserType</returns>
        </member>
        <member name="T:RAMS.Web.Areas.SystemAdmin.Controllers.PositionController">
            <summary>
            PositionController implements position related methods
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.PositionController.Index">
            <summary>
            Default action method that returns main view of Profile controller
            User will be redirected to appropriate location depending on his/her UserType if user does not belong to this area
            </summary>
            <returns>Main view of Position controller</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.PositionController.PositionDelete(System.Int32)">
            <summary>
            PositionDelete action method gets the list of all the positions and passes it to _PositionDelete partial view
            </summary>
            <param name="months">Number of months after position has been closed</param>
            <returns>_PositionDelete partial view with the list of all the positions</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.PositionController.PositionDelete(System.Int32[])">
            <summary>
            PositionDelete action method attempts to archive and delete selected Positions
            </summary>
            <param name="selectedIds">Ids of the Positions to be archived/deleted</param>
            <returns>_SuccessConfirmation partial view upon success, _SelectionFailureConfirmation or _FailureConfirmation otherwise</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.PositionController.PositionDeleteConfirmation">
            <summary>
            PositionDeleteConfirmation action method is a getter for _PositionDeleteConfirmation partial view
            </summary>
            <returns>_PositionDeleteConfirmation partial view</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.PositionController.PositionDetails(System.Int32)">
            <summary>
            PositionDetails action method retrieves the details of the position and passes it to _PositionDetails partial view
            </summary>
            <param name="positionId">Id of the position which details are being fetched</param>
            <returns>_PositionDetails partial view with the details for the position</returns>
        </member>
        <member name="T:RAMS.Web.Areas.SystemAdmin.Controllers.ProfileController">
            <summary>
            ProfileController implements employee profile related methods
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.ProfileController.Index(System.String)">
            <summary>
            Default action method that returns main view of Profile controller
            User will be redirected to appropriate location depending on his/her UserType if user does not belong to this area
            </summary>
            <param name="message">Message that will be displayed in the view. This message will inform the user about success or failure of particular operation</param>
            <returns>Main view of Profile controller</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.ProfileController.ProfileDetails">
            <summary>
            ProfileDetails method gets employee's details and passes it to _ProfileDetails partial view
            </summary>
            <returns>_ProfileDetails partial view with current user's employee details</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.ProfileController.UploadProfilePicture">
            <summary>
            UploadProfilePicture method gets current user's user name and passes it to _UploadProfilePicture partial view 
            </summary>
            <returns>_UploadProfilePicture partial view with current user's user name passed in to it in a AdminProfilePictureViewModel view model</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.ProfileController.UploadProfilePicture(RAMS.ViewModels.AdminProfilePictureViewModel)">
            <summary>
            UploadProfilePicture method determines what is the content type of the uploaded file and if file content type is not supported passes an error message to Index action method. Otherwise, saves the file.
            </summary>
            <param name="model">View model with information required to save the file</param>
            <returns>Redirects to Index view with success message, or failure message</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.ProfileController.DeleteProfilePicture">
            <summary>
            DeleteProfilePicture method deletes profile picture for current user
            </summary>
            <returns>Redirects to Index view with success message, or failure message</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.ProfileController.GetNotificationList">
            <summary>
            GetNotificationList method gets the list of notifications for current user and passes it to _NotificationList partial view
            </summary>
            <returns>_NotificationList partial view with the list of notifications for current user (If any)</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.ProfileController.ChangeNotificationStatus(System.Int32,System.String,System.String)">
            <summary>
            ChangeNotificationStatus method gets selected notification details and passes it to _ChangeNotificationStatus partial view
            </summary>
            <param name="notificationId">Id of selected notification</param>
            <param name="notificationTitle">Title of selected notification</param>
            <param name="notificationStatus">Status of selected notification (Already set to oposite of current for API)</param>
            <returns>_ChangeNotificationStatus partial view with required information for updating the status</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.ProfileController.ChangeNotificationStatus(RAMS.ViewModels.NotificationChangeStatusViewModel)">
            <summary>
            ChangeNotificationStatus method changes the status of the notification and returns _Confirmation partial view with success message or failure message depending on the outcome of this method
            </summary>
            <param name="model">NotificationChangeStatusViewModel view model with information required for updating notification status</param>
            <returns>_Confirmation partial view with success message or failure message depending on the outcome of this method</returns>
        </member>
        <member name="T:RAMS.Web.Areas.SystemAdmin.Controllers.UserController">
            <summary>
            UserController controller implements CRUD operations for application users and employees
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.#ctor">
            <summary>
            Default UserController constructor
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.#ctor(RAMS.Web.ApplicationUserManager,RAMS.Web.ApplicationSignInManager)">
            <summary>
            UserController constructor that sets GetUserManager and GetSignInManager
            </summary>
            <param name="userManager"></param>
            <param name="signInManager"></param>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.Index">
            <summary>
            Default action method that returns main view of User controller
            User will be redirected to appropriate location depending on his/her UserType if user does not belong to this area
            </summary>
            <returns>Main view of User controller</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.UserList">
            <summary>
            UserList action method displays all the employees in _UserList partial view
            </summary>
            <returns>_UserList partial view with all the employees</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.NewUser">
            <summary>
            NewUser method returns _NewUser partial view
            </summary>
            <returns>_NewUser partial view</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.UserTypeSelect">
            <summary>
            UserTypeSelect method returns _UserTypeSelect partial view
            </summary>
            <returns></returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.UserTypeSelect(RAMS.ViewModels.UserTypeViewModel)">
            <summary>
            UserTypeSelect method displays different registration form depending on user selection from _UserTypeSelect partial view
            </summary>
            <param name="model">Model that contains information about user selection</param>
            <returns>Different registration form depending on user selection from _UserTypeSelect partial view, or _Error partial view with error message if selection did not match to UserType enum values</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.RegisterAgent(RAMS.ViewModels.AgentAddViewModel)">
            <summary>
            RegisterAgent method creates new user and new employee 
            </summary>
            <param name="model">User and employee details required in order to create new user and employee</param>
            <returns>_RegisterAgentConfirmation partial view with success message if user and employee were successfully created, _Error partial view with error message otherwise. If mode is not valid, returns _RegisterAgent partial view</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.RegisterClient(RAMS.ViewModels.ClientAddViewModel)">
            <summary>
            RegisterClient method creates new user and new employee
            </summary>
            <param name="model">User and employee details required in order to create new user and employee</param>
            <returns>_RegisterClientConfirmation partial view with success message if user and employee were successfully created, _Error partial view with error message otherwise. If mode is not valid, returns _RegisterClient partial view</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.RegisterAdmin(RAMS.ViewModels.AdminAddViewModel)">
            <summary>
            RegisterAdmin method creates new user and new employee
            </summary>
            <param name="model">User and employee details required in order to create new user and employee</param>
            <returns>_RegisterAdminConfirmation partial view with success message if user and employee were successfully created, _Error partial view with error message otherwise. If mode is not valid, returns _RegisterAdmin partial view</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.EditUser(System.String,System.String)">
            <summary>
            EditUser method displays different edit form depending on user selection from _UserList partial view
            </summary>
            <param name="userName">User name of selected user</param>
            <param name="userType">User type of selected user</param>
            <returns>Different edit form depending on user selection from _UserList partial view, or _Error partial view with error message if userType parameter value did not match to UserType enum values</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.EditAgent(RAMS.ViewModels.AgentEditViewModel)">
            <summary>
            EditAgent method updates user and employee profiles
            </summary>
            <param name="model">Updated user and employee details</param>
            <returns>_EditAgentConfirmation partial view with success message if user and employee were successfully updated, _Error partial view with error message otherwise. If mode is not valid, returns _EditAgent partial view</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.EditClient(RAMS.ViewModels.ClientEditViewModel)">
            <summary>
            EditClient method updates user and employee profiles
            </summary>
            <param name="model">Updated user and employee details</param>
            <returns>_EditClientConfirmation partial view with success message if user and employee were successfully updated, _Error partial view with error message otherwise. If mode is not valid, returns _EditClient partial view</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.EditAdmin(RAMS.ViewModels.AdminEditViewModel)">
            <summary>
            EditAdmin method updates user and employee profiles
            </summary>
            <param name="model">Updated user and employee details</param>
            <returns>_EditAdminConfirmation partial view with success message if user and employee were successfully updated, _Error partial view with error message otherwise. If mode is not valid, returns _EditAdmin partial view</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.ResetPassword(System.String,System.String,System.String,System.String)">
            <summary>
            ResetPassword method populates the view model with properties received from _EditAgent, _EditClient, and _EditAdmin partial views and passes it to _ResetPassword partial view
            </summary>
            <param name="userName">Setter for UserName property</param>
            <param name="userType">Setter for UserType property</param>
            <param name="email">Setter for Email property</param>
            <param name="firstName">Setter for FirstName property</param>
            <returns>_ResetPassword partial view with populated view model</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.ResetPassword(RAMS.ViewModels.ResetPasswordViewModel)">
            <summary>
            ResetPassword method validates new password and displays an error message if password does not match password criteria, otherwise replaces old password with a new password
            </summary>
            <param name="model">User information required to reset password</param>
            <returns>_SuccessConfirmation or _FailureConfirmation partial view with confirmation message of success or failure depending on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.BlockUser(System.String,System.String)">
            <summary>
            BlockUser method populates the view model with properties received from _EditAgent, _EditClient, and _EditAdmin partial views and passes it to _BlockUser partial view
            </summary>
            <param name="userName">Setter for UserName property</param>
            <param name="userType">Setter for UserType property</param>
            <returns>_BlockUser partial view with populated view model</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.BlockUser(RAMS.ViewModels.UserConfirmationViewModel)">
            <summary>
            BlockUser method sets employee UserStatus property and user UserStatus claim to BLOCKED and returns _SuccessConfirmation or _FailureConfirmation partial view with the result (Success or failure) of this method
            </summary>
            <param name="model">User details required to block the user</param>
            <returns>_SuccessConfirmation or _FailureConfirmation partial view with confirmation message of success or failure depending on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.UnblockUser(System.String,System.String)">
            <summary>
            UnblockUser method populates the view model with properties received from _EditAgent, _EditClient, and _EditAdmin partial views and passes it to _UnblockUser partial view
            </summary>
            <param name="userName">Setter for UserName property</param>
            <param name="userType">Setter for UserType property</param>
            <returns>_UnblockUser partial view with populated view model</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.UnblockUser(RAMS.ViewModels.UserConfirmationViewModel)">
            <summary>
            UnblockUser method sets employee UserStatus property and user UserStatus claim to ACTIVE and returns _SuccessConfirmation or _FailureConfirmation partial view with the result (Success or failure) of this method
            </summary>
            <param name="model">User details required to unblock the user</param>
            <returns>_SuccessConfirmation or _FailureConfirmation partial view with confirmation message of success or failure depending on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.DeleteUser(System.String,System.String)">
            <summary>
            DeleteUser method populates the view model with employee information retrieved from database and passes it to _UnblockUser partial view
            </summary>
            <param name="userName">Property required to retrieve the employee profile from database</param>
            <param name="userType">Property required to retrieve the employee profile from database</param>
            <returns>_DeleteUser partial view with populated view model</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.DeleteUser(RAMS.ViewModels.UserConfirmationViewModel)">
            <summary>
            DeleteUser method either physically deletes the user profile and employee profile, or flags both the user profile (By setting UserStatus claim to DELETED) and the employee profile (By setting UserStatus property to DELETED) as DELETED
            </summary>
            <param name="model">User details required to delete the user</param>
            <returns>_SuccessConfirmation or _FailureConfirmation partial view with confirmation message of success or failure depending on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.Dispose(System.Boolean)">
            <summary>
            Dispose method releases unmanaged resources and optionally releases managed resources
            </summary>
            <param name="disposing">If disposing is set to true releases both managed and unmanaged resources, otherwise only releases unmanaged resources</param> 
        </member>
        <member name="P:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.PasswordRegex">
            <summary>
            PasswordRegex getter 
            </summary>
        </member>
        <member name="P:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.GetSignInManager">
            <summary>
            ApplicationSignInManager getter and setter
            </summary>
        </member>
        <member name="P:RAMS.Web.Areas.SystemAdmin.Controllers.UserController.GetUserManager">
            <summary>
            ApplicationUserManager getter and setter
            </summary>
        </member>
        <member name="T:RAMS.Web.Areas.SystemAdmin.SystemAdminAreaRegistration">
            <summary>
            SystemAdminAreaRegistration class allows to register SystemAdmin area
            </summary>
        </member>
        <member name="M:RAMS.Web.Areas.SystemAdmin.SystemAdminAreaRegistration.RegisterArea(System.Web.Mvc.AreaRegistrationContext)">
            <summary>
            RegisterArea method allows to access MapRoute method of AreaRegistrationContext class and configure routing for SystemAdmin area
            </summary>
            <param name="context">Area registration context</param>
        </member>
        <member name="T:RAMS.Web.Configuration.AutofacConfiguration">
            <summary>
            AutofacConfiguration class allows to setup Autofac configuration
            </summary>
        </member>
        <member name="M:RAMS.Web.Configuration.AutofacConfiguration.Configure">
            <summary>
            Configure method is called when application starts and allows to set container and register types
            </summary>
        </member>
        <member name="T:RAMS.Web.Configuration.AutoMapperConfiguration">
            <summary>
            AutoMapperConfiguration class allows to setup AutoMapper configuration
            </summary>
        </member>
        <member name="M:RAMS.Web.Configuration.AutoMapperConfiguration.Configure">
            <summary>
            Configure method is called when application starts and allows to setup custom mappings for AutoMapper
            </summary>
        </member>
        <member name="T:RAMS.Web.Configuration.ModelToModelMapping">
            <summary>
            ModelToModelMapping profile allows to configure domain model to model mapping
            </summary>
        </member>
        <member name="M:RAMS.Web.Configuration.ModelToModelMapping.Configure">
            <summary>
            Configure method contains detailed configuration of each mapping 
            </summary>
        </member>
        <member name="T:RAMS.Web.Configuration.ModelToViewModelMapping">
            <summary>
            ModelToViewModelMapping profile allows to configure domain model to view model mapping
            </summary>
        </member>
        <member name="M:RAMS.Web.Configuration.ModelToViewModelMapping.Configure">
            <summary>
            Configure method contains detailed configuration of each mapping 
            </summary>
        </member>
        <member name="T:RAMS.Web.Configuration.ViewModelToModelMapping">
            <summary>
            ViewModelToModelMapping profile allows to configure view model to domain model mapping
            </summary>
        </member>
        <member name="M:RAMS.Web.Configuration.ViewModelToModelMapping.Configure">
            <summary>
            Configure method contains detailed configuration of each mapping 
            </summary>
        </member>
        <member name="T:RAMS.Web.Controllers.HomeController">
            <summary>
            HomeController controller will be (By default) accessed as soon as application starts, or user navigates to the application by it's root URL
            </summary>
        </member>
        <member name="M:RAMS.Web.Controllers.HomeController.Index">
            <summary>
            Index action method will be called as soon as application starts, or user navigates to the application by it's root URL
            Once authenticated, user will be redirected to default controller and default action of the area where user belongs (UserType determines which area user belongs to)
            </summary>
            <returns>Redirects to default controller and default action of the area where user belongs</returns>
        </member>
        <member name="T:RAMS.Web.Controllers.AccountController">
            <summary>
            AccountController controller implements login and registration related action methods
            </summary>
        </member>
        <member name="M:RAMS.Web.Controllers.AccountController.#ctor">
            <summary>
            Default AccountController constructor
            </summary>
        </member>
        <member name="M:RAMS.Web.Controllers.AccountController.#ctor(RAMS.Web.ApplicationUserManager,RAMS.Web.ApplicationSignInManager)">
            <summary>
            AccountController constructor that sets UserManager and SignInManager
            </summary>
            <param name="userManager">UserManager setter</param>
            <param name="signInManager">SignInManager setter</param>
        </member>
        <member name="M:RAMS.Web.Controllers.AccountController.Login(System.String)">
            <summary>
            Login 
            </summary>
            <param name="returnUrl"></param>
            <returns>Login form</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.AccountController.Login(RAMS.Web.Identity.LoginViewModel,System.String)">
            <summary>
            Login method authenticates the user if provided credentials are valid, otherwise re-displays login form with an error message
            </summary>
            <param name="model">Login credentials</param>
            <param name="returnUrl">URL of a page from where user was redirected to login form (In cases when cookie expires)</param>
            <returns>Login form if there has been an error while logging in, otherwise redirects to returnUrl or Home view if returnUrl is null</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.AccountController.BlockedUserLogin">
            <summary>
            BlockedUserLogin action method signs out the user if their account has been blocked and displays an error message in FailedLogin view
            </summary>
            <returns>FailedLogin view with an error message</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.AccountController.DeletedUserLogin">
            <summary>
            DeletedUserLogin action method signs out the user if their account has been deleted and displays an error message in FailedLogin view
            </summary>
            <returns>FailedLogin view with an error message</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.AccountController.LogOff">
            <summary>
            LogOff method signs out the user and redirects to home view
            </summary>
            <returns>Home</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.AccountController.EditUserProfile">
            <summary>
            EditUserProfile method gets user details and returns _EditUserProfile partial view with the model containing user details
            </summary>
            <returns>_EditUserProfile partial view with the model containing user details</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.AccountController.EditUserProfile(RAMS.ViewModels.UserEditProfileViewModel)">
            <summary>
            EditUserProfile method persists updated user details and returns success message if update was successful, error message otherwise
            </summary>
            <param name="model">ViewModel with updated user details</param>
            <returns>Success message if update was successful (_EditUserConfirmation partial view), error message otherwise (_Error partial view)</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.AccountController.ChangePassword(System.String,System.String)">
            <summary>
            ChangePassword method populates the view model with properties received from _EditUserProfile partial view and passes it to _ChangePassword partial view
            </summary>
            <param name="userName">Setter for UserName property</param>
            <param name="userType">Setter for UserType property</param>
            <returns>_ChangePassword partial view with populated view model</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.AccountController.ChangePassword(RAMS.ViewModels.ChangePasswordViewModel)">
            <summary>
            ChangePassword method validates current and new password and displays an error message if new password does not match password criteria or old password does not match database records, otherwise replaces old password with a new password
            </summary>
            <param name="model">User information required to reset password</param>
            <returns>_SuccessConfirmation partial view with success message, or _Error partial view with error message depending on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.AccountController.ForgotPassword">
            <summary>
            ForgotPassword method returns _ForgotPassword partial view
            </summary>
            <returns>_ForgotPassword partial view</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.AccountController.ForgotPassword(RAMS.Web.Identity.ForgotPasswordViewModel)">
            <summary>
            ForgotPassword method checks if an email address and user name provided by user match to email address and user name stored in data context, and if it matches, an email will be sent to administration with request to change password. Otherwise form will be redisplayed with an error message
            </summary>
            <param name="model">Email address and user name provided by user</param>
            <returns>_ForgotPasswordConfirmation partial view with success message if outcome of this method is success, _ForgotPassword partial view with model errors otherwise</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.AccountController.Dispose(System.Boolean)">
            <summary>
            Dispose method releases unmanaged resources and optionally releases managed resources
            </summary>
            <param name="disposing">If disposing is set to true releases both managed and unmanaged resources, otherwise only releases unmanaged resources</param> 
        </member>
        <member name="P:RAMS.Web.Controllers.AccountController.PasswordRegex">
            <summary>
            PasswordRegex getter 
            </summary>
        </member>
        <member name="P:RAMS.Web.Controllers.AccountController.GetSignInManager">
            <summary>
            Getter and setter for SignInManager property
            </summary>
        </member>
        <member name="P:RAMS.Web.Controllers.AccountController.GetUserManager">
            <summary>
            Getter and setter for UserManager property
            </summary>
        </member>
        <member name="T:RAMS.Web.Controllers.TestController">
            <summary>
            Test controller is a controller for testing stuff 
            </summary>
        </member>
        <member name="M:RAMS.Web.Controllers.TestController.Index">
            <summary>
            Method for testing stuff
            </summary>
            <returns>Positive test result</returns>
        </member>
        <member name="T:RAMS.Web.Controllers.WebAPI.AdminController">
            <summary>
            AdminController is an api controller that allows to access context resources by sending http requests and responces
            </summary>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AdminController.#ctor(RAMS.Service.IAdminService)">
            <summary>
            Controller that sets admin service in order to access context resources
            </summary>
            <param name="adminService">Parameter for setting admin service</param>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AdminController.GetAllAdmins">
            <summary>
            Get the list of all admins
            </summary>
            <returns>The list of all admins</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AdminController.GetAdmin(System.Int32)">
            <summary>
            Get an admin by id
            </summary>
            <param name="id">Id of an admin to be fetched</param>
            <returns>An admin with matching id</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AdminController.GetOneAdminByUsername(System.String)">
            <summary>
            Get an admin by username
            </summary>
            <param name="userName">Username of an admin to be fetched</param>
            <returns>An admin with matching username</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AdminController.PostAdmin(RAMS.Models.Admin)">
            <summary>
            Create new admin
            </summary>
            <param name="admin">An admin to be created</param>
            <returns>The Uri of newly created admin</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AdminController.PutAdmin(RAMS.Models.Admin)">
            <summary>
            Update existing admin
            </summary>
            <param name="admin">Admin to be updated</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AdminController.BlockUnblockAdminByUserName(System.String,System.Boolean)">
            <summary>
            Block or unblock admin by user name
            </summary>
            <param name="userName">User name of the admin to be blocked or unblocked</param>
            <param name="block">Boolean indicating whether admin should be blocked or unblocked</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AdminController.DeleteAdminById(System.Int32,System.Boolean)">
            <summary>
            Delete existing admin by id (Logical and physical)
            </summary>
            <param name="id">Id of the admin to be deleted</param>
            <param name="physicalDelete">Boolean indicating whether delete is physical or logical</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AdminController.DeleteAdminByUserName(System.String,System.Boolean)">
            <summary>
            Delete existing admin by user name
            </summary>
            <param name="userName">User name of the admin to be deleted</param>
            <param name="physicalDelete">Boolian indicating whether delete is physical or logical</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AdminController.AdminExists(System.Int32)">
            <summary>
            AdminExists is used to check whether the admin is present in data context
            </summary>
            <param name="id">Id of the admin to check against</param>
            <returns>True if admin is present in data context, false otherwise</returns>
        </member>
        <member name="T:RAMS.Web.Controllers.WebAPI.AgentController">
            <summary>
            AgentController is an api controller that allows to access context resources by sending http requests and responces
            </summary>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AgentController.#ctor(RAMS.Service.IAgentService,RAMS.Service.IDepartmentService)">
            <summary>
            Controller that sets agent service in order to access context resources
            </summary>
            <param name="agentService">Parameter for setting agent service</param>
            <param name="departmentService">Parameter for setting department service</param>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AgentController.GetAllAgents">
            <summary>
            Get the list of all agents
            </summary>
            <returns>The list of all agents</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AgentController.GetAgent(System.Int32)">
            <summary>
            Get an agent by id
            </summary>
            <param name="id">Id of an agent to be fetched</param>
            <returns>An agent with matching id</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AgentController.GetManyAgentsByDepartmentId(System.Int32)">
            <summary>
            Get the list of all agents that belong to specific department (Agent.DepartmentID = deartmentId)
            </summary>
            <param name="departmentId">Department id for which all the agents are to be fetched</param>
            <returns>List of the agents that belong to specific department</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AgentController.GetOneAgentByUsername(System.String)">
            <summary>
            Get an agent by username
            </summary>
            <param name="userName">Username of an agent to be fetched</param>
            <returns>An agent with matching username</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AgentController.PostAgent(RAMS.Models.Agent)">
            <summary>
            Create new agent
            </summary>
            <param name="agent">An agent to be created</param>
            <returns>The Uri of newly created agent</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AgentController.PutAgent(RAMS.Models.Agent)">
            <summary>
            Update existing agent
            </summary>
            <param name="agent">Agent to be updated</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AgentController.BlockUnblockAgentByUserName(System.String,System.Boolean)">
            <summary>
            Block or unblock agent by user name
            </summary>
            <param name="userName">User name of the agent to be blocked or unblocked</param>
            <param name="block">Boolean indicating whether agent should be blocked or unblocked</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AgentController.DeleteAgentById(System.Int32,System.Boolean)">
            <summary>
            Delete existing agent by id (Logical and physical)
            </summary>
            <param name="id">Id of the agent to be deleted</param>
            <param name="physicalDelete">Boolean indicating whether delete is physical or logical</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AgentController.DeleteAgentByUserName(System.String,System.Boolean)">
            <summary>
            Delete existing agent by user name
            </summary>
            <param name="userName">User name of the agent to be deleted</param>
            <param name="physicalDelete">Boolian indicating whether delete is physical or logical</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.AgentController.AgentExists(System.Int32)">
            <summary>
            AgentExists is used to check whether the agent is present in data context
            </summary>
            <param name="id">Id of the agent to check against</param>
            <returns>True if agent is present in data context, false otherwise</returns>
        </member>
        <member name="T:RAMS.Web.Controllers.WebAPI.CandidateController">
            <summary>
            CandidateController is an api controller that allows to access context resources by sending http requests and responces
            </summary>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.CandidateController.#ctor(RAMS.Service.ICandidateService,RAMS.Service.IInterviewService)">
            <summary>
            Controller that sets candidate service in order to access context resources
            </summary>
            <param name="candidateService">Parameter for setting candidate service</param>
            <param name="interviewService">Parameter for setting interview service</param>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.CandidateController.GetAllCandidates">
            <summary>
            Get the list of all candidates
            </summary>
            <returns>The list of all candidates</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.CandidateController.GetCandidate(System.Int32)">
            <summary>
            Get a candidate by id
            </summary>
            <param name="id">Id of a candidate to be fetched</param>
            <returns>A candidate with matching id</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.CandidateController.GetCandidateResumeById(System.Int32)">
            <summary>
            Get candidates resume as file by candidate id
            </summary>
            <param name="candidateId">Id of the candidate whos resume is being fetched</param>
            <returns>Resume as a file</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.CandidateController.PostCandidate(RAMS.Models.Candidate)">
            <summary>
            Create new candidate
            </summary>
            <param name="candidate">A candidate to be created</param>
            <returns>The Uri of newly created candidate</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.CandidateController.PutCandidate(RAMS.Models.Candidate)">
            <summary>
            Update existing candidate
            </summary>
            <param name="candidate">Candidate to be updated</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.CandidateController.UpdateCandidateFeedback(System.Int32,System.String,System.Boolean)">
            <summary>
            Update candidate feedback
            </summary>
            <param name="candidateId">If of the candidate to be updated</param>
            <param name="feedback">Feedback to be updated</param>
            <param name="isInterviewed">Flag to determine whether candidate was interviewd</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.CandidateController.DeleteCandidate(System.Int32)">
            <summary>
            Delete existing candidate
            </summary>
            <param name="id">Id of the candidate to be deleted</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.CandidateController.CandidateExists(System.Int32)">
            <summary>
            CandidateExists is used to check whether the candidate is present in data context
            </summary>
            <param name="id">Id of the candidate to check against</param>
            <returns>True if candidate is present in data context, false otherwise</returns>
        </member>
        <member name="T:RAMS.Web.Controllers.WebAPI.CategoryController">
            <summary>
            CategoryController is an api controller that allows to access context resources by sending http requests and responces
            </summary>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.CategoryController.#ctor(RAMS.Service.ICategoryService)">
            <summary>
            Controller that sets category service in order to access context resources
            </summary>
            <param name="categoryService">Parameter for setting category service</param>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.CategoryController.GetAllCategorys">
            <summary>
            Get the list of all categories
            </summary>
            <returns>The list of all categories</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.CategoryController.GetCategory(System.Int32)">
            <summary>
            Get a category by id
            </summary>
            <param name="id">Id of a category to be fetched</param>
            <returns>A category with matching id</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.CategoryController.PostCategory(RAMS.Models.Category)">
            <summary>
            Create new category
            </summary>
            <param name="category">A category to be created</param>
            <returns>The Uri of newly created category</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.CategoryController.PutCategory(RAMS.Models.Category)">
            <summary>
            Update existing category
            </summary>
            <param name="category">Category to be updated</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.CategoryController.DeleteCategory(System.Int32)">
            <summary>
            Delete existing category
            </summary>
            <param name="id">Id of the category to be deleted</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.CategoryController.CategoryExists(System.Int32)">
            <summary>
            CategoryExists is used to check whether the category is present in data context
            </summary>
            <param name="id">Id of the category to check against</param>
            <returns>True if category is present in data context, false otherwise</returns>
        </member>
        <member name="T:RAMS.Web.Controllers.WebAPI.ClientController">
            <summary>
            ClientController is an api controller that allows to access context resources by sending http requests and responces
            </summary>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.ClientController.#ctor(RAMS.Service.IClientService)">
            <summary>
            Controller that sets client service in order to access context resources
            </summary>
            <param name="clientService">Parameter for setting client service</param>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.ClientController.GetAllClients">
            <summary>
            Get the list of all clients
            </summary>
            <returns>The list of all clients</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.ClientController.GetClient(System.Int32)">
            <summary>
            Get a client by id
            </summary>
            <param name="id">Id of a client to be fetched</param>
            <returns>A client with matching id</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.ClientController.GetOneClientByUsername(System.String)">
            <summary>
            Get a client by username
            </summary>
            <param name="userName">Username of a client to be fetched</param>
            <returns>A client with matching username</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.ClientController.PostClient(RAMS.Models.Client)">
            <summary>
            Create new client
            </summary>
            <param name="client">A client to be created</param>
            <returns>The Uri of newly created client</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.ClientController.PutClient(RAMS.Models.Client)">
            <summary>
            Update existing client
            </summary>
            <param name="client">Client to be updated</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.ClientController.BlockUnblockClientByUserName(System.String,System.Boolean)">
            <summary>
            Block or unblock client by user name
            </summary>
            <param name="userName">User name of the client to be blocked or unblocked</param>
            <param name="block">Boolean indicating whether client should be blocked or unblocked</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.ClientController.DeleteClientById(System.Int32,System.Boolean)">
            <summary>
            Delete existing client by id (Logical and physical)
            </summary>
            <param name="id">Id of the client to be deleted</param>
            <param name="physicalDelete">Boolean indicating whether delete is physical or logical</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.ClientController.DeleteClientByUserName(System.String,System.Boolean)">
            <summary>
            Delete existing client by user name
            </summary>
            <param name="userName">User name of the client to be deleted</param>
            <param name="physicalDelete">Boolian indicating whether delete is physical or logical</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.ClientController.ClientExists(System.Int32)">
            <summary>
            ClientExists is used to check whether the client is present in data context
            </summary>
            <param name="id">Id of the client to check against</param>
            <returns>True if client is present in data context, false otherwise</returns>
        </member>
        <member name="T:RAMS.Web.Controllers.WebAPI.DepartmentController">
            <summary>
            DepartmentController is an api controller that allows to access context resources by sending http requests and responces
            </summary>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.DepartmentController.#ctor(RAMS.Service.IDepartmentService)">
            <summary>
            Controller that sets department service in order to access context resources
            </summary>
            <param name="departmentService">Parameter for setting department service</param>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.DepartmentController.GetAllDepartments">
            <summary>
            Get the list of all departments
            </summary>
            <returns>The list of all departments</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.DepartmentController.GetDepartment(System.Int32)">
            <summary>
            Get a department by id
            </summary>
            <param name="id">Id of a department to be fetched</param>
            <returns>A department with matching id</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.DepartmentController.PostDepartment(RAMS.Models.Department)">
            <summary>
            Create new department
            </summary>
            <param name="department">Department to be created</param>
            <returns>The Uri of newly created department</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.DepartmentController.PutDepartment(RAMS.Models.Department)">
            <summary>
            Update existing department
            </summary>
            <param name="department">Department to be updated</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.DepartmentController.DeleteDepartment(System.Int32)">
            <summary>
            Delete existing department
            </summary>
            <param name="id">Id of the department to be deleted</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.DepartmentController.DepartmentExists(System.Int32)">
            <summary>
            DepartmentExists is used to check whether the department is present in data context
            </summary>
            <param name="id">Id of the department to check against</param>
            <returns>True if department is present in data context, false otherwise</returns>
        </member>
        <member name="T:RAMS.Web.Controllers.WebAPI.InterviewController">
            <summary>
            InterviewController is an api controller that allows to access context resources by sending http requests and responces
            </summary>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.InterviewController.#ctor(RAMS.Service.IInterviewService,RAMS.Service.IAgentService,RAMS.Service.ICandidateService)">
            <summary>
            Controller that sets interview service in order to access context resources
            </summary>
            <param name="interviewService">Parameter for setting interview service</param>
            <param name="agentService">Parameter for setting agent service</param>
            <param name="candidateService">Parameter for setting candidate service</param>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.InterviewController.GetAllInterviews">
            <summary>
            Get the list of all interviews
            </summary>
            <returns>The list of all interviews</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.InterviewController.GetManyInterviewsByAgentId(System.Int32)">
            <summary>
            Get the list of many interviews for specific agent
            </summary>
            <param name="agentId">Id of the agent whos interviews are being fetched</param>
            <returns>The list of many interviews for specific agent</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.InterviewController.GetManyInterviewsByAgentId(System.String)">
            <summary>
            Get the list of many interviews for specific agent by username
            </summary>
            <param name="username">Username of the agent whos interviews are being fetched</param>
            <returns>The list of many interviews for specific agent by username</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.InterviewController.GetInterview(System.Int32)">
            <summary>
            Get an interview by id
            </summary>
            <param name="id">Id of an interview to be fetched</param>
            <returns>An interview with matching id</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.InterviewController.PostInterview(RAMS.Models.Interview)">
            <summary>
            Create new interview
            </summary>
            <param name="interview">An interview to be created</param>
            <returns>The Uri of newly created interview</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.InterviewController.CreateInterview(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Create new interview from parameters
            </summary>
            <param name="candidateId">Setter for CandidateId</param>
            <param name="selectedDate">Setter for InterviewDate</param>
            <param name="agentUserName">Setter for InterviewerId</param>
            <param name="selected">Flag that indicates whether candidate has interviews</param>
            <returns>The Uri of newly created interview</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.InterviewController.PutInterview(RAMS.Models.Interview)">
            <summary>
            Update existing interview
            </summary>
            <param name="interview">Interview to be updated</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.InterviewController.DeleteInterview(System.Int32)">
            <summary>
            Delete existing interview
            </summary>
            <param name="id">Id of the interview to be deleted</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.InterviewController.InterviewExists(System.Int32)">
            <summary>
            InterviewExists is used to check whether the interview is present in data context
            </summary>
            <param name="id">Id of the interview to check against</param>
            <returns>True if interview is present in data context, false otherwise</returns>
        </member>
        <member name="T:RAMS.Web.Controllers.WebAPI.NotificationController">
            <summary>
            NotificationController is an api controller that allows to access context resources by sending http requests and responces
            </summary>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.NotificationController.#ctor(RAMS.Service.INotificationService,RAMS.Service.IAgentService,RAMS.Service.IClientService,RAMS.Service.IAdminService)">
            <summary>
            Controller that sets notification service in order to access context resources
            </summary>
            <param name="notificationService">Parameter for setting NotificationService</param>
            <param name="agentService">Parameter for setting AgentService</param>
            <param name="clientService">Parameter for setting ClientService</param>
            <param name="adminService">Parameter for setting AdminService</param>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.NotificationController.GetAllNotifications">
            <summary>
            Get the list of all notifications
            </summary>
            <returns>The list of all notifications</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.NotificationController.GetManyNotificationsByAgentUserName(System.String)">
            <summary>
            Get the list of notifications for specific agent
            </summary>
            <param name="agentUserName">User name of the agent whos notification are being fetched</param>
            <returns>The list of notifications for specific agent</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.NotificationController.GetManyNotificationsByClientUserName(System.String)">
            <summary>
            Get the list of notifications for specific client
            </summary>
            <param name="clientUserName">User name of the client whos notification are being fetched</param>
            <returns>The list of notifications for specific client</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.NotificationController.GetManyNotificationsByAdminUserName(System.String)">
            <summary>
            Get the list of notifications for specific admin
            </summary>
            <param name="adminUserName">User name of the admin whos notification are being fetched</param>
            <returns>The list of notifications for specific admin</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.NotificationController.GetNotification(System.Int32)">
            <summary>
            Get a notification by id
            </summary>
            <param name="id">Id of a notification to be fetched</param>
            <returns>A notification with matching id</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.NotificationController.PostNotification(RAMS.Models.Notification)">
            <summary>
            Create new notification
            </summary>
            <param name="notification">Notification to be created</param>
            <returns>The Uri of newly created notification</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.NotificationController.PostNotificationByAgentUsername(System.String,RAMS.Models.Notification)">
            <summary>
            Create new notification when username is provided instead of agent id
            </summary>
            <param name="agentUsername">Username of the agent to whom notification will be assigned</param>
            <param name="notification">Notification to be created</param>
            <returns>The Uri of newly created notification</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.NotificationController.PostNotificationByAdminUsername(System.String,RAMS.Models.Notification)">
            <summary>
            Create new notification when username is provided instead of admin id
            </summary>
            <param name="adminUsername">Username of the admin to whom notification will be assigned</param>
            <param name="notification">Notification to be created</param>
            <returns>The Uri of newly created notification</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.NotificationController.PutNotification(RAMS.Models.Notification)">
            <summary>
            Update existing notification
            </summary>
            <param name="notification">Notification to be updated</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.NotificationController.ChangeNotificationStatus(System.Int32,System.Boolean)">
            <summary>
            Update status of the existing notification
            </summary>
            <param name="id">Id of the notification to be updated</param>
            <param name="isReadStatus">Status of the notification depends on the calue of isReadStatus (If isReadStatus is true, status will be set to Read. Otherwise, it will be set to Unread)</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.NotificationController.DeleteNotification(System.Int32)">
            <summary>
            Delete existing notification
            </summary>
            <param name="id">Id of the notification to be deleted</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.NotificationController.NotificationExists(System.Int32)">
            <summary>
            NotificationExists is used to check whether the notification is present in data context
            </summary>
            <param name="id">Id of the notification to check against</param>
            <returns>True if notification is present in data context, false otherwise</returns>
        </member>
        <member name="T:RAMS.Web.Controllers.WebAPI.PositionController">
            <summary>
            PositionController is an api controller that allows to access context resources by sending http requests and responces
            </summary>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.PositionController.#ctor(RAMS.Service.IPositionService,RAMS.Service.IAgentService,RAMS.Service.ICandidateService,RAMS.Service.IInterviewService,RAMS.Service.IPositionArchiveService,RAMS.Service.ICandidateArchiveService)">
            <summary>
            Controller that sets position service in order to access context resources
            </summary>
            <param name="positionService">Parameter for setting position service</param>
            <param name="agentService">Parameter for setting agent service</param>
            <param name="candidateService">Parameter for setting candidate service</param>
            <param name="interviewService">Parameter for setting interview service</param>
            <param name="positionArchiveService">Parameter for setting position archive service</param>
            <param name="candidateArchiveService">Parameter for setting candidate archive service</param>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.PositionController.GetAllPositions">
            <summary>
            Get the list of all positions
            </summary>
            <returns>The list of all positions</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.PositionController.GetAllPositionsForClient(System.String)">
            <summary>
            Get the list of all positions for specific client
            </summary>
            <param name="clientName">User name of the client who's positions are being retrieved</param>
            <returns>The list of all positions for specific client</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.PositionController.GetAllPositionsForAgent(System.String)">
            <summary>
            Get the list of all positions for specific agent
            </summary>
            <param name="agentName">User name of the agent who's positions are being retrieved</param>
            <returns>The list of all positions for specific agent</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.PositionController.GetManyPositionByCategoryName(System.String)">
            <summary>
            Get the list of multiple positions with specific category
            </summary>
            <param name="categoryName">Category for which positions are being retrieved</param>
            <returns>The list of multiple positions with specific category</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.PositionController.GetManyPositionByKeyword(System.String)">
            <summary>
            Get the list of multiple positions that match the keyword
            </summary>
            <param name="keyword">Keyword to match with positions' data</param>
            <returns>The list of multiple positions that match the keyword</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.PositionController.GetPosition(System.Int32)">
            <summary>
            Get a position by id
            </summary>
            <param name="id">Id of a position to be fetched</param>
            <returns>A position with matching id</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.PositionController.PostPosition(RAMS.Models.Position)">
            <summary>
            Create new position
            </summary>
            <param name="position">Position to be created</param>
            <returns>The Uri of newly created position</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.PositionController.PutPosition(RAMS.Models.Position)">
            <summary>
            Update existing position
            </summary>
            <param name="position">Position to be updated</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.PositionController.UpdatePositionStatus(System.Int32,System.Int32)">
            <summary>
            Update existing position's status
            </summary>
            <param name="positionId">Id of the position for which status is going to be updated</param>
            <param name="status">Integer representation of the status to be updated</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.PositionController.AssignPosition(System.Int32,System.Int32)">
            <summary>
            Assign an agent to an existing position
            </summary>
            <param name="positionId">Id of the position to which an agent to be assigned</param>
            <param name="agentId">Id of the agent to be assigned</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.PositionController.DeletePosition(System.Int32[])">
            <summary>
            Delete existing position and its dependants
            </summary>
            <param name="positionIds">Ids of the positions to be deleted</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.PositionController.DeletePosition(System.Int32)">
            <summary>
            Delete existing position
            </summary>
            <param name="id">Id of the position to be deleted</param>
            <returns>HttpResponseMessage with status code dependning on the outcome of this method</returns>
        </member>
        <member name="M:RAMS.Web.Controllers.WebAPI.PositionController.PositionExists(System.Int32)">
            <summary>
            PositionExists is used to check whether the position is present in data context
            </summary>
            <param name="id">Id of the position to check against</param>
            <returns>True if position is present in data context, false otherwise</returns>
        </member>
        <member name="T:RAMS.Web.MvcApplication">
            <summary>
            MvcApplication class implements global application configuration
            </summary>
        </member>
        <member name="M:RAMS.Web.MvcApplication.Application_Start">
            <summary>
            Application_Start method is executed when application starts and it is used to configure all the components of the application
            </summary>
        </member>
        <member name="M:RAMS.Web.MvcApplication.Application_BeginRequest">
            <summary>
            Application_BeginRequest method is executed at the begining of each request
            </summary>
        </member>
    </members>
</doc>
